/**
 * Copyright (c) 2017 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 *  
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 * 
 * *******************************************************************************
 * generated by Functionblock.genmodel
 */
package org.eclipse.vorto.core.api.model.functionblock.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.vorto.core.api.model.functionblock.util.FunctionblockAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FunctionblockItemProviderAdapterFactory extends FunctionblockAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright (c) 2017 Bosch Software Innovations GmbH and others.\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nand Eclipse Distribution License v1.0 which accompany this distribution.\n \nThe Eclipse Public License is available at\nhttp://www.eclipse.org/legal/epl-v10.html\nThe Eclipse Distribution License is available at\nhttp://www.eclipse.org/org/documents/edl-v10.php.\n\nContributors:\nBosch Software Innovations GmbH - Please refer to git log\n\n*******************************************************************************\ngenerated by Functionblock.genmodel"; //$NON-NLS-1$

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunctionblockItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionblockModelItemProvider functionblockModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionblockModelAdapter() {
		if (functionblockModelItemProvider == null) {
			functionblockModelItemProvider = new FunctionblockModelItemProvider(this);
		}

		return functionblockModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.FunctionBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionBlockItemProvider functionBlockItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.FunctionBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionBlockAdapter() {
		if (functionBlockItemProvider == null) {
			functionBlockItemProvider = new FunctionBlockItemProvider(this);
		}

		return functionBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Fault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultItemProvider faultItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Fault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultAdapter() {
		if (faultItemProvider == null) {
			faultItemProvider = new FaultItemProvider(this);
		}

		return faultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.ReturnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnTypeItemProvider returnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.ReturnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnTypeAdapter() {
		if (returnTypeItemProvider == null) {
			returnTypeItemProvider = new ReturnTypeItemProvider(this);
		}

		return returnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnObjectTypeItemProvider returnObjectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnObjectTypeAdapter() {
		if (returnObjectTypeItemProvider == null) {
			returnObjectTypeItemProvider = new ReturnObjectTypeItemProvider(this);
		}

		return returnObjectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.ReturnPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnPrimitiveTypeItemProvider returnPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.ReturnPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnPrimitiveTypeAdapter() {
		if (returnPrimitiveTypeItemProvider == null) {
			returnPrimitiveTypeItemProvider = new ReturnPrimitiveTypeItemProvider(this);
		}

		return returnPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.PrimitiveParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveParamItemProvider primitiveParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.PrimitiveParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveParamAdapter() {
		if (primitiveParamItemProvider == null) {
			primitiveParamItemProvider = new PrimitiveParamItemProvider(this);
		}

		return primitiveParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.RefParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefParamItemProvider refParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.RefParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefParamAdapter() {
		if (refParamItemProvider == null) {
			refParamItemProvider = new RefParamItemProvider(this);
		}

		return refParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Param} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamItemProvider paramItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Param}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamAdapter() {
		if (paramItemProvider == null) {
			paramItemProvider = new ParamItemProvider(this);
		}

		return paramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.ReturnDictonaryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnDictonaryTypeItemProvider returnDictonaryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.ReturnDictonaryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnDictonaryTypeAdapter() {
		if (returnDictonaryTypeItemProvider == null) {
			returnDictonaryTypeItemProvider = new ReturnDictonaryTypeItemProvider(this);
		}

		return returnDictonaryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.vorto.core.api.model.functionblock.DictonaryParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictonaryParamItemProvider dictonaryParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.vorto.core.api.model.functionblock.DictonaryParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictonaryParamAdapter() {
		if (dictonaryParamItemProvider == null) {
			dictonaryParamItemProvider = new DictonaryParamItemProvider(this);
		}

		return dictonaryParamItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (functionblockModelItemProvider != null) functionblockModelItemProvider.dispose();
		if (functionBlockItemProvider != null) functionBlockItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (statusItemProvider != null) statusItemProvider.dispose();
		if (faultItemProvider != null) faultItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (returnTypeItemProvider != null) returnTypeItemProvider.dispose();
		if (returnObjectTypeItemProvider != null) returnObjectTypeItemProvider.dispose();
		if (returnPrimitiveTypeItemProvider != null) returnPrimitiveTypeItemProvider.dispose();
		if (primitiveParamItemProvider != null) primitiveParamItemProvider.dispose();
		if (refParamItemProvider != null) refParamItemProvider.dispose();
		if (paramItemProvider != null) paramItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (returnDictonaryTypeItemProvider != null) returnDictonaryTypeItemProvider.dispose();
		if (dictonaryParamItemProvider != null) dictonaryParamItemProvider.dispose();
	}

}
