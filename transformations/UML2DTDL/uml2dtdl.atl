module UML2DTDL;
-- @path DTDL=/DTML/model/dTML.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI Profile=http://www.eclipse.org/uml2/5.0.0/UML
create OUT: UML  from IN: DTDL, P:Profile;

--- Evaluates whether the context has the given stereotype or not.
--- taken from https://wiki.eclipse.org/ATL/User_Guide_-_The_ATL_Language#Since_ATL_3.1
helper context UML!Element def: hasStereotype(stereotype : String) : Boolean =
	self.getAppliedStereotypes() -> collect(st | st.name) -> includes(stereotype);

helper def: getStereotype(name: String): UML!Stereotype = Profile!Stereotype.allInstances() -> any(s | s.name = name);
helper def: base_package : String = 'at.jku.se.airquality';
rule system2package {
	from
		dts: DTDL!DigitalTwinEnvironment
	to
		package:UML!Package(
			packagedElement <- dts.types
		)
	do{
		package.applyProfile(Profile!Profile.allInstances() -> first());
	}
}

-- main entry point
rule interface2class {
	from
		interf: DTDL!Interface
	to
		class: UML!Class (
			ownedAttribute <- interf.contents -> select(s | s.oclType() = DTDL!Telemetry) -> union(interf.contents -> select(s | s.oclType() = DTDL!Property)),
			ownedOperation <- interf.contents -> select(s | s.oclType() = DTDL!Command)
		)
	do{
		class.applyStereotype(thisModule.getStereotype('DTDL_VL_Element'));
		class.applyStereotype(thisModule.getStereotype('DTDL_Element'));
		
		if(interf.id.oclType().name <> 'OclAny'){
			interf.id.path.split('\\.')->last().println();
			class.name <- interf.id.path.split('\\.')->last();
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', interf.id.path.split('\\.')->last());
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', interf.id.version);
		}else{
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', thisModule.base_package);
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', 1);
		}
		if(interf.displayName.oclType().name <> 'OclAny'){
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'displayName', interf.displayName);
		}
		if(interf.description.oclType().name <> 'OclAny'){
			class.setValue(class.getAppliedStereotypes() -> any(s|s.name = 'DTDL_VL_Element'), 'description', interf.description);
		}	
	}
}


rule Telemetry2Attribute{
	from tel: DTDL!Telemetry
	
	to prop: UML!Property(
		name <- tel.name
	)
	do{
		prop.applyStereotype(thisModule.getStereotype('DTDL_Element'));
		prop.applyStereotype(thisModule.getStereotype('DTDL_VL_Element'));
		prop.applyStereotype(thisModule.getStereotype('DT_Property'));
		prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DT_Property'), 'isTimeSeries', false);
		if(tel.id.oclType().name <> 'OclAny'){
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', tel.id.path.split('\\.')->last());
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', tel.id.version);
		}else{
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', thisModule.base_package);
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', 1);
		}
		if(tel.displayName.oclType().name <> 'OclAny'){
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'displayName', tel.displayName);
		}
		if(tel.description.oclType().name <> 'OclAny'){
			prop.setValue(prop.getAppliedStereotypes() -> any(s|s.name = 'DTDL_VL_Element'), 'description', tel.description);
		}
	}
}

rule PropertyToAttribute{
	from prop: DTDL!Property
	
	to attr: UML!Property(
		name <- prop.name,
		isReadOnly <- not prop.writable
		
	)
	do{
		attr.applyStereotype(thisModule.getStereotype('DTDL_Element'));
		attr.applyStereotype(thisModule.getStereotype('DTDL_VL_Element'));
		attr.applyStereotype(thisModule.getStereotype('DT_Property'));
		attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DT_Property'), 'isTimeSeries', false);
		if(prop.id.oclType().name <> 'OclAny'){
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', prop.id.path.split('\\.')->last());
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', prop.id.version);
		}else{
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_path', thisModule.base_package);
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'id_version', 1);
		}
		if(prop.displayName.oclType().name <> 'OclAny'){
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_Element'), 'displayName', prop.displayName);
		}
		if(prop.description.oclType().name <> 'OclAny'){
			attr.setValue(attr.getAppliedStereotypes() -> any(s|s.name = 'DTDL_VL_Element'), 'description', prop.description);
		}	
	}
	
}


rule RelationshipToAssociation{
	from rel: DTDL!Relationship
	
	to assoc: UML!Association(
		name <- rel.name
	)
}

rule ComponentToAssociation{
	from rel: DTDL!Component
	
	to assoc: UML!Association(
		name <- rel.name
	)
}

rule CommandToOperation{
	from com: DTDL!Command
	
	to op: UML!Operation(
		name <- com.name
	)
}






